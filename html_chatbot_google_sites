<!DOCTYPE html>
<html>
<head>
    <title>Chatbot Example</title>
    <style>
        /* Add your custom styling here */
        #messages-container {
            width: 600px;
            height: 300px;
            border: 1px solid black;
            overflow-y: scroll;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id="chat-container">
        <div id="messages-container"></div>
        <input type="text" id="user-input" placeholder="Type your message..." />
        <button id="send-button">Send</button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://apis.google.com/js/api.js" onload="initializeGoogleDocsAPI()"></script>
    <script>
        // OpenAI API configuration
        const apiKey = "YOUR_OPENAI_API_KEY"; // Replace with your OpenAI API key
        const apiUrl = "https://api.openai.com/v1/chat/completions";
        const model = "gpt-3.5-turbo";
        const temperature = 0.0;
        const maxTokens = 256;
        const messagesContainer = document.getElementById("messages-container");

        // Function to initialize Google Docs API client library
        function initializeGoogleDocsAPI() {
            // Load the Google API client and authenticate with the service account credentials
            gapi.load('client', () => {
                gapi.client.init({
                    apiKey: 'YOUR_SERVICE_ACCOUNT_KEY', // Replace with your service account key
                    clientId: 'YOUR_CLIENT_ID', // Replace with your client ID
                    discoveryDocs: ['https://docs.googleapis.com/$discovery/rest?version=v1'],
                    scope: 'https://www.googleapis.com/auth/documents.readonly'
                }).then(() => {
                    // Google Docs API is ready to use
                });
            });
        }

        // Function to send a message to the OpenAI API and get a response
        async function getChatbotResponse(message) {
            // Retrieve additional tips or links from the Google Docs document based on the user's input
            const additionalContent = await retrieveAdditionalContentFromDocs(message);

            const response = await axios.post(apiUrl, {
                messages: [{ role: "system", content: `You are a helpful assistant. ${additionalContent}` }, { role: "user", content: message }],
                model,
                temperature,
                max_tokens: maxTokens
            }, {
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${apiKey}`
                }
            });

            return response.data.choices[0].message.content;
        }

        // Function to retrieve additional content from the Google Docs document based on user input
        async function retrieveAdditionalContentFromDocs(userInput) {
            try {
                // Make a request to the Google Docs API to retrieve the document content
                const response = await gapi.client.docs.documents.get({
                    documentId: 'YOUR_DOCUMENT_ID', // Replace with the actual document ID
                });

                // Extract the relevant content from the document based on the user input
                const documentContent = response.result.body.content;
                const additionalContent = documentContent
                    .filter((content) => content.paragraph && content.paragraph.elements)
                    .map((content) =>
                        content.paragraph.elements
                            .filter((element) => element.textRun && element.textRun.content.includes(userInput))
                            .map((element) => element.textRun.content)
                    )
                    .flat()
                    .join(' ');

                // Return the additional content
                return additionalContent;
            } catch (error) {
                console.error('Error retrieving additional content:', error);
                return ''; // Return an empty string or handle the error accordingly
            }
        }

        // Function to handle user input and display the conversation
        function handleUserInput() {
            const userInput = document.getElementById("user-input");
            const userMessage = userInput.value;

            // Display user message in the messages container
            messagesContainer.innerHTML += `<p class="user-message"><strong>Me:</strong> ${userMessage}</p>`;

            // Clear the input field
            userInput.value = "";

            // Get the chatbot's response
            getChatbotResponse(userMessage)
                .then((response) => {
                    // Display chatbot's response in the messages container
                    messagesContainer.innerHTML += `<p class="chatbot-message"><strong>Assistant Richard:</strong> ${response}</p>`;

                    // Scroll to the bottom of the messages container
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                })
                .catch((error) => {
                    console.error("Error:", error);
                });
        }

        // Attach event listeners
        document.getElementById("send-button").addEventListener("click", handleUserInput);

        document.getElementById("user-input").addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                handleUserInput();
            }
        });
    </script>
</body>
</html>

