<!DOCTYPE html>
<html>
<head>
    <title>Chatbot Example</title>
<style>
    /* Add your custom styling here */
    #messages-container {
        width: 400px;
        height: 300px;
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow-y: scroll;
        padding: 10px;
        background-color: #f8f8f8;
        font-family: Arial, sans-serif;
        font-size: 14px;
        line-height: 1.5;
    }
    /* Style for user messages */
    .user-message {
        margin-bottom: 10px;
    }
    /* Style for chatbot messages */
    .chatbot-message {
        margin-bottom: 10px;
    }
    /* Style for message sender */
    .message-sender {
        font-weight: bold;
    }
</style>
</head>
<body>
    <div id="chat-container">
        <div id="messages-container"></div>
        <input type="text" id="user-input" placeholder="Type your message..." />
        <button id="send-button">Send</button>
    </div>

    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script>
        // OpenAI API configuration
        const apiKey = "YOUR_API_KEY"; // Replace with your OpenAI API key
        const apiUrl = "https://api.openai.com/v1/chat/completions"; // OpenAI model URL
        const model = "gpt-3.5-turbo";
        const temperature = 0.0;
        const maxTokens = 256;
        const messagesContainer = document.getElementById("messages-container");

      // Function to retrieve additional content from the embedded Google Doc based on user input
        function retrieveAdditionalContentFromDoc(userInput) {
            try {
                // Replace `DOCUMENT_ID` with the actual Google Doc ID
                const docId = 'YOUR_DOCUMENT_ID';

                // Replace `EMBEDDED_PAGE_URL` with the URL of the page where the Google Doc is embedded
                const embeddedPageUrl = 'URL_FROM_EMBEDED_IN_THE_SITE';

                // Access the content of the embedded Google Doc using DOM manipulation
                const iframe = document.querySelector(`iframe[src*="${embeddedPageUrl}"]`);
                const iframeContent = iframe.contentDocument || iframe.contentWindow.document;
                const documentContent = iframeContent.documentElement.innerHTML;

                // Extract the relevant content from the document based on the user input
                // Modify this code to extract the desired information from the documentContent variable
                const additionalContent = "Sample additional content";

                // Return the additional content
                return additionalContent;
            } catch (error) {
                console.error('Error retrieving additional content:', error);
                return ''; // Return an empty string or handle the error accordingly
            }
        }

        // Function to send a message to the OpenAI API and get a response
        async function getChatbotResponse(message) {
    const additionalContent = await retrieveAdditionalContentFromDoc(message);

    const response = await axios.post(apiUrl, {
    messages: [
        { role: "system", content: "You are a helpful and insightful assistant that will answer the user's question by retrieving the required information from the additionalContent document" },
        { role: "user", content: message }
    ],
    model,
    temperature,
    max_tokens: maxTokens
}, {
    headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
    }
});

    return response.data.choices[0].message.content;
}

        // Function to handle user input and display the conversation
        function handleUserInput() {
            const userInput = document.getElementById("user-input");
            const userMessage = userInput.value;

            // Display user message in the messages container
            messagesContainer.innerHTML += `<p class="user-message"><strong>Me:</strong> ${userMessage}</p>`;

            // Clear the input field
            userInput.value = "";

          // Retrieve additional content from the embedded Google Doc
            const additionalContent = retrieveAdditionalContentFromDoc(userMessage);

            // Get the chatbot's response
            getChatbotResponse(userMessage)
                .then((response) => {
                    // Display chatbot's response in the messages container
                    messagesContainer.innerHTML += `<p class="chatbot-message"><strong>Assistant Richard:</strong> ${response}</p>`;

                    // Scroll to the bottom of the messages container
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                })
                .catch((error) => {
                    console.error("Error:", error);
                });
        }

        // Attach event listeners
        document.getElementById("send-button").addEventListener("click", handleUserInput);

        document.getElementById("user-input").addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                handleUserInput();
            }
        });
    </script>
</body>
</html>


